'E4_21groups_NACE_rev_2.2', 'E5', 'E6', 'E7', 'E9', 'E10', 'E13', 'E14_1', 'E14_2', 'E15', 'E16',
'E17', 'E19', 'E23', 'E24', 'F1', 'F2_9group', 'F3_21groups_NACE_rev_2.2', 'F4', 'F5',
'F6', 'F8_1', 'F8_2', 'G2_1', 'G2_2', 'G2_3Total', 'G3', 'J1_4group', 'J3_1', 'J3_2', 'J3_LastJob')
sum(rowSums(is.na(data[cols_to_check])) > 0)
sum(!is.na(data$E14_2))
get_mode <- function(x) {
uniqx <- unique(x)
uniqx[which.max(tabulate(match(x, uniqx)))]
}
data %>%
filter(!is.na(E14_2)) %>%
select(E14_2) %>%
summarise(mode = get_mode(E14_2))
data %>%
filter(!is.na(E14_2)) %>%
count(E14_2, sort = TRUE)
cleaned_data <- read_excel("cleaned_data.xlsx")
decoded_data <- cleaned_data %>%
mutate(
B3 = case_when(
B3 == 1 ~ "Male",
B3 == 2 ~ "Female",
TRUE ~ NA_character_
)
) %>%
mutate(
Age_16groups = case_when(
Age_16groups == 1 ~ "0-4",
Age_16groups == 2 ~ "5-9",
Age_16groups == 3 ~ "10-14",
Age_16groups == 4 ~ "15-19",
Age_16groups == 5 ~ "20-24",
Age_16groups == 6 ~ "25-29",
Age_16groups == 7 ~ "30-34",
Age_16groups == 8 ~ "35-39",
Age_16groups == 9 ~ "40-44",
Age_16groups == 10 ~ "45-49",
Age_16groups == 11 ~ "50-54",
Age_16groups == 12 ~ "55-59",
Age_16groups == 13 ~ "60-64",
Age_16groups == 14 ~ "65-69",
Age_16groups == 15 ~ "70-74",
Age_16groups == 16 ~ "75+",
TRUE ~ NA_character_
)
) %>%
mutate(
E15 = case_when(
E15 == 1 ~ "Up to 55 000 AMD",
E15 == 2 ~ "55 000 AMD",
E15 == 3 ~ "55 001 -  110 000 AMD",
E15 == 4 ~ "110 001 - 220 000 AMD",
E15 == 5 ~ "220 001 - 440 000 AMD",
E15 == 6 ~ "440 001 - 600 000 AMD",
E15 == 7 ~ "600 001 - 700 000 AMD",
E15 == 8 ~ "Refused to answer",
E15 == 9 ~ "Do not know / difficult to answer",
TRUE ~ NA_character_
)
) %>%
mutate(
A3 = case_when(
A3 == 1 ~ "Yerevan",
A3 == 2 ~ "Aragatsotn",
A3 == 3 ~ "Ararat",
A3 == 4 ~ "Armavir",
A3 == 5 ~ "Gegharkunik",
A3 == 6 ~ "Lori",
A3 == 7 ~ "Kotayq",
A3 == 8 ~ "Shirak",
A3 == 9 ~ "Syuniq",
A3 == 10 ~ "Vayoc Dzor",
A3 == 11 ~ "Tavush",
TRUE ~ NA_character_
)
) %>%
mutate(
A5 = case_when(
A5 == 1 ~ "Urban",
A5 == 2 ~ "Rural",
TRUE ~ NA_character_
)
) %>%
mutate(
E2_9group = case_when(
E2_9group == 1 ~ "Legislators & managers",
E2_9group == 2 ~ "Professionals",
E2_9group == 3 ~ "Technicians",
E2_9group == 4 ~ "Clerks",
E2_9group == 5 ~ "Service & sales",
E2_9group == 6 ~ "Agricultural workers",
E2_9group == 7 ~ "Craft workers",
E2_9group == 8 ~ "Operators",
E2_9group == 9 ~ "Elementary occupations",
TRUE ~ NA_character_
)
) %>%
mutate(
E4_21groups_NACE_rev_2.2 = case_when(
E4_21groups_NACE_rev_2.2 == 1 ~ "Agriculture",
E4_21groups_NACE_rev_2.2 == 2 ~ "Mining",
E4_21groups_NACE_rev_2.2 == 3 ~ "Manufacturing",
E4_21groups_NACE_rev_2.2 == 4 ~ "Utilities",
E4_21groups_NACE_rev_2.2 == 5 ~ "Water & Waste",
E4_21groups_NACE_rev_2.2 == 6 ~ "Construction",
E4_21groups_NACE_rev_2.2 == 7 ~ "Trade & Repair",
E4_21groups_NACE_rev_2.2 == 8 ~ "Transport & Storage",
E4_21groups_NACE_rev_2.2 == 9 ~ "Hospitality",
E4_21groups_NACE_rev_2.2 == 10 ~ "Media & Publishing",
E4_21groups_NACE_rev_2.2 == 11 ~ "IT & Telecom",
E4_21groups_NACE_rev_2.2 == 12 ~ "Finance",
E4_21groups_NACE_rev_2.2 == 13 ~ "Real Estate",
E4_21groups_NACE_rev_2.2 == 14 ~ "Science & Tech",
E4_21groups_NACE_rev_2.2 == 15 ~ "Admin Support",
E4_21groups_NACE_rev_2.2 == 16 ~ "Public Admin",
E4_21groups_NACE_rev_2.2 == 17 ~ "Education",
E4_21groups_NACE_rev_2.2 == 18 ~ "Health & Social",
E4_21groups_NACE_rev_2.2 == 19 ~ "Arts & Sports",
E4_21groups_NACE_rev_2.2 == 20 ~ "Other Services",
E4_21groups_NACE_rev_2.2 == 21 ~ "Household Work",
TRUE ~ NA_character_
)
) %>%
mutate(
B8 = case_when(
B8 == 1 ~ "Up tp 2000",
B8 == 2 ~ "2001-2005",
B8 == 3 ~ "2006-2010",
B8 == 4 ~ "Since 2012",
TRUE ~ NA_character_
)
) %>%
mutate(
J3_1 = case_when(
J3_1 == 1 ~ "Armenia",
J3_1 == 2 ~ "Abroad",
J3_1 == 3 ~ "No Paid Job",
TRUE ~ NA_character_
)
) %>%
mutate(
J3_2 = case_when(
J3_2 == 1 ~ "Armenia",
J3_2 == 2 ~ "Abroad",
J3_2 == 3 ~ "No Paid Job",
TRUE ~ NA_character_
)
) %>%
mutate(
E10 = case_when(
E10 == 1 ~ "Public",
E10 == 2 ~ "NGO",
E10 == 3 ~ "Private",
E10 == 4 ~ "Self-emplyed"
)
) %>%
mutate(
F6 = case_when(
F6 == 1 ~ "Public",
F6 == 2 ~ "NGO",
F6 == 3 ~ "Private",
F6 == 4 ~ "Self-employed"
)
) %>%
mutate(
B7 = case_when(
B7 == 1 ~ "Illiterate",
B7 == 2 ~ "No primary",
B7 == 3 ~ "Primary",
B7 == 4 ~ "Basic",
B7 == 5 ~ "Secondary / high",
B7 == 6 ~ "Vocational",
B7 == 7 ~ "Secondary specialized",
B7 == 8 ~ "Bachelor's degree",
B7 == 9 ~ "Master's degree",
B7 == 10 ~ "Certified specialist",
B7 == 11 ~ "Post-graduate (Ph.D, doctorate, internship, residency)",
TRUE ~ NA_character_
)
)
ggplot(decoded_data, aes(x = factor(Age_16groups), fill = factor(B3))) +
geom_bar(position = "stack") +
labs(
title = "Age Distribution by Gender",
x = "Age Range",
y = "Count",
fill = "Gender"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
gender_counts <- decoded_data %>%
group_by(Age_16groups, B3) %>%
summarise(Count = n(), .groups = "drop")
gender_counts_wide <- gender_counts %>%
pivot_wider(names_from = B3, values_from = Count, values_fill = 0) %>%
rename("Age Range" = Age_16groups)
# display
knitr::kable(gender_counts_wide, caption = "Gender Count by Age Group")
age_gender_stats <- decoded_data %>%
filter(!is.na(E14_1), !is.na(Age_16groups), !is.na(B3)) %>%
group_by(Age_16groups, B3) %>%
summarize(
mean_salary = mean(E14_1),
se = sd(E14_1) / sqrt(n()),
lower_ci = mean_salary - 1.96 * se,
upper_ci = mean_salary + 1.96 * se,
n = n(),
.groups = "drop"
) %>%
filter(n >= 10) %>%
mutate(salary_label = paste0(format(round(mean_salary), big.mark = ",")))
ggplot(age_gender_stats,
aes(x = Age_16groups, y = mean_salary,
color = B3, group = B3)) +
geom_line(linewidth = 1.2) +
geom_pointrange(
aes(ymin = lower_ci, ymax = upper_ci),
position = position_dodge(width = 0.2),
size = 0.7
) +
geom_text(aes(y = upper_ci, label = salary_label),
position = position_dodge(width = 0.5),
vjust = -0.5, size = 3, color = "black") +
labs(
title = "Mean Salary by Age Group and Gender with 95% Confidence Intervals",
x = "Age Category",
y = "Mean Salary (AMD)",
color = "Gender"
) +
scale_y_continuous(labels = scales::comma) +
theme_minimal()
correct_order <- c("Up tp 2000", "2001-2005", "2006-2010", "Since 2012")
plot_data <- decoded_data %>%
mutate(
graduation_year_ordered = factor(
B8,
levels = correct_order,
ordered = TRUE
)
) %>%
filter(!is.na(E14_1)) %>%
group_by(graduation_year_ordered, B3) %>%  # Group by the ordered factor
summarize(
mean_salary = mean(E14_1),
se = sd(E14_1) / sqrt(n()),
lower_ci = mean_salary - 1.96 * se,
upper_ci = mean_salary + 1.96 * se,
.groups = "drop"  # Explicitly drop grouping
) %>%
mutate(salary_label = paste0(format(round(mean_salary), big.mark = ","), " AMD"))
ggplot(plot_data, aes(x = graduation_year_ordered, y = mean_salary,
color = B3, group = B3)) +
geom_pointrange(aes(ymin = lower_ci, ymax = upper_ci),
position = position_dodge(width = 0.5)) +
geom_line(position = position_dodge(width = 0.5)) +
geom_text(aes(y = upper_ci, label = salary_label),
position = position_dodge(width = 0.5),
vjust = -0.5, size = 3, color = "black") +
labs(title = "Mean Salary with 95% Confidence Intervals",
x = "Graduation Year", y = "Mean Salary (AMD)",
color = "Gender") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
graduation_summary <- decoded_data %>%
filter(!is.na(B3), !is.na(B8)) %>%
count(Gender = B3, Graduation_Year = B8, name = "Count") %>%
group_by(Graduation_Year) %>%
mutate(Percentage = Count / sum(Count) * 100) %>%
ungroup() %>%
mutate(Percentage_Label = paste0(round(Percentage, 1), "%")) %>%
select(Gender, Graduation_Year, Count, Percentage, Percentage_Label) %>%
arrange(Graduation_Year, Gender)
print(graduation_summary)
unique(cleaned_data['J3_1'])
unique(decoded_data['J3_2'])
primary_job_count <- decoded_data %>%
filter(!is.na(E10)) %>%
count(B3, name = "count")
primary_job_count
secondary_job_count <- decoded_data %>%
filter(!is.na(F6)) %>%
count(B3, name = "count")
secondary_job_count
plot_data <- decoded_data %>%
select(gender = B3, salary = E14_1, ownership = E10) %>%
filter(!is.na(salary), !is.na(ownership)) %>%
mutate(ownership = factor(ownership))
summary_stats <- plot_data %>%
group_by(gender, ownership) %>%
summarize(
mean_salary = mean(salary),
se = sd(salary) / sqrt(n()),
lower_ci = mean_salary - 1.96 * se,
upper_ci = mean_salary + 1.96 * se,
n = n(),
.groups = "drop"
) %>%
filter(n >= 10)
ggplot(summary_stats,
aes(x = ownership, y = mean_salary, fill = gender)) +
geom_col(position = position_dodge(width = 0.8), width = 0.7) +
geom_errorbar(
aes(ymin = lower_ci, ymax = upper_ci),
position = position_dodge(width = 0.8),
width = 0.2,
color = "black"
) +
geom_text(
aes(label = paste0(round(mean_salary/1000, 1), "k \n(n=", n, ")"),
y = upper_ci),
position = position_dodge(width = 0.8),
vjust = -0.5,
size = 3
) +
labs(
title = "Mean Salary (AMD) by Company Ownership (Primary Job)",
subtitle = "Error bars show 95% confidence intervals",
x = "Ownership Type",
y = "Mean Salary (AMD)",
fill = "Gender"
) +
scale_y_continuous(labels = scales::comma) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
salary_by_region_overview <- decoded_data %>%
select(gender = B3, region = A3, salary = E14_1) %>%
filter(!is.na(region), !is.na(gender), !is.na(salary)) %>%
group_by(region, gender) %>%
summarise(mean_salary = mean(salary, na.rm = TRUE),
median_salary = median(salary, na.rm = TRUE),
min_salary = min(salary, na.rm = TRUE),
max_salary = max(salary, na.rm = TRUE))
salary_by_region_overview
mean_salary_by_region <- decoded_data %>%
select(gender = B3, region = A3, salary = E14_1) %>%
filter(!is.na(region), !is.na(gender), !is.na(salary)) %>%
group_by(region, gender) %>%
summarise(mean_salary = mean(salary, na.rm = TRUE))
mean_salary_by_region
difference_in_mean_salary_by_region <- mean_salary_by_region %>%
pivot_wider(names_from = gender, values_from = mean_salary) %>%
mutate(wage_gap = Male - Female) %>%
select(region, wage_gap)
difference_in_mean_salary_by_region
armenia_map <- st_read("armenia.json")
region_name_map <- tibble::tibble(
map_name = c("Tavush", "Lori", "Shirak", "Gegharkunik", "Vayots Dzor",
"Syunik", "Ararat", "Aragatsotn", "Armavir", "Kotayk", "Erevan"),
region = c("Tavush", "Lori", "Shirak", "Gegharkunik", "Vayoc Dzor",
"Syuniq", "Ararat", "Aragatsotn", "Armavir", "Kotayq", "Yerevan")  # match your data
)
armenia_map <- armenia_map %>%
left_join(region_name_map, by = c("name" = "map_name"))
wage_gap_map <- armenia_map %>%
left_join(difference_in_mean_salary_by_region, by = "region")
ggplot(wage_gap_map) +
geom_sf(aes(fill = wage_gap), color = "white") +
scale_fill_gradientn(
colors = c("navy", "skyblue", "yellow", "orange", "red"),
na.value = "gray90",
name = "Wage Gap (AMD)"
) +
labs(
title = "Gender Wage Gap by Region (Armenia)",
subtitle = "Difference in mean salary: Male - Female",
caption = "Data: Your Survey"
) +
theme_minimal()
p <- ggplot(wage_gap_map) +
geom_sf(aes(fill = wage_gap, text = paste("Region:", name, "<br>Wage Gap:", wage_gap))) +
scale_fill_viridis_c() +
theme_minimal()
ggplotly(p, tooltip = "text")
urban_rural_salary <- decoded_data %>%
select(settlement = A5, gender = B3, salary = E14_1) %>%
filter(!is.na(settlement), !is.na(gender), !is.na(salary)) %>%
group_by(settlement, gender) %>%
summarise(mean_salary = mean(salary), min_salary = min(salary), max_salary = max(salary))
urban_rural_salary
ggplot(decoded_data, aes(x = A5, y = E14_1, fill = A5)) +
geom_boxplot(outlier.color = "red", outlier.alpha = 0.3) +
coord_cartesian(ylim = c(0, 500000)) +
labs(
title = "Income Distribution: Urban vs Rural",
x = "Settlement Type",
y = "Salary (AMD)"
) +
theme_minimal() +
scale_fill_manual(values = c("Urban" = "#66c2a5", "Rural" = "#fc8d62"))
employees_by_industry <- decoded_data %>%
group_by(industry = E4_21groups_NACE_rev_2.2, gender = B3) %>%
summarise(employee_number = n())
employees_by_industry
ggplot(decoded_data, aes(x = factor(E4_21groups_NACE_rev_2.2), fill = factor(B3))) +
geom_bar(position = "stack") +
labs(
title = "Industry Distribution by Gender",
x = "Industry",
y = "Count",
fill = "Gender"
) +
theme_minimal() +
coord_flip() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(decoded_data, aes(x = factor(E2_9group), fill = factor(B3))) +
geom_bar(position = "stack") +
labs(
title = "Job/Activity Distribution by Gender",
x = "Industry",
y = "Count",
fill = "Gender"
) +
theme_minimal() +
coord_flip() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
job_title_salary_overview <- decoded_data %>%
select(job = E2_9group, gender = B3, salary = E14_1) %>%
filter(!is.na(job), !is.na(gender), !is.na(salary)) %>%
group_by(job, gender) %>%
summarise(n = n(),
mean_salary = mean(salary),
median_salary = median(salary),
sd = sd(salary),
se = sd(salary) / sqrt(n()),
lower_ci = mean_salary - 1.96 * se,
upper_ci = mean_salary + 1.96 * se
)
job_title_salary_overview
ggplot(job_title_salary_overview,
aes(x = job, y = mean_salary, fill = gender)) +
geom_col(position = position_dodge(width = 0.8), width = 0.7) +
geom_errorbar(
aes(ymin = lower_ci, ymax = upper_ci),
position = position_dodge(width = 0.8),
width = 0.2,
color = "black"
) +
geom_text(
aes(label = paste0(round(mean_salary/1000, 1), "k \n(n=", n, ")"),
y = upper_ci),
position = position_dodge(width = 0.8),
vjust = -0.5,
size = 3
) +
labs(
title = "Mean Salary (AMD) by Main Job/Activity",
subtitle = "Error bars show 95% confidence intervals",
x = "Job",
y = "Mean Salary (AMD)",
fill = "Gender"
) +
scale_y_continuous(labels = scales::comma) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
settlement_job_hypothesis_test_data <- decoded_data %>%
select(settlement = A5, job = E2_9group, gender = B3, salary = E14_1) %>%
filter(!is.na(settlement), !is.na(job), !is.na(gender), !is.na(salary)) %>%
group_by(settlement, job, gender) %>%
summarise(n = n(),
mean = mean(salary),
sd = sd(salary))
settlement_job_hypothesis_test_data
educational_level_distribution <- decoded_data %>%
select(education = B7, gender = B3, salary = E14_1) %>%
filter(!is.na(education), !is.na(gender), !is.na(salary)) %>%
group_by(education) %>%
summarise(n = n())
educational_level_distribution
educational_level_salary_overview <- decoded_data %>%
select(education = B7, gender = B3, salary = E14_1) %>%
filter(!is.na(education), !is.na(gender), !is.na(salary)) %>%
group_by(education, gender) %>%
summarise(n = n(),
mean = mean(salary),
sd = sd(salary))
educational_level_salary_overview
education_profession_salary_overview <- decoded_data %>%
select(education = B7, profession = E2_9group, gender = B3, salary = E14_1) %>%
mutate(
education_group = case_when(
education %in% c("Illiterate", "No primary", "Primary", "Basic",
"Secondary / high", "Vocational", "Secondary specialized") ~ "No Higher Education",
education %in% c("Bachelor's degree", "Bachelor’s degree") ~ "Undergraduate",  # Both versions
education %in% c("Master's degree", "Certified specialist",
"Post-graduate (Ph.D, doctorate, internship, residency)") ~ "Graduate",
TRUE ~ NA_character_  # Explicit handling of any unexpected values
)
) %>%
filter(!is.na(education_group), !is.na(profession), !is.na(gender), !is.na(salary)) %>%
group_by(profession, education_group, gender) %>%
summarise(
n = n(),
mean = mean(salary),
sd = sd(salary),
.groups = "drop"
)
education_profession_salary_overview
salary_categorical <- decoded_data %>%
select(gender = B3, salary = E15) %>%
filter(!is.na(gender), !is.na(salary))
salary_categorical
salary_categorical <- decoded_data %>%
select(gender = B3, salary = E15) %>%
filter(!is.na(gender), !is.na(salary)) %>%
group_by(gender, salary)
salary_categorical
salary_categorical <- decoded_data %>%
select(gender = B3, salary = E15) %>%
filter(!is.na(gender), !is.na(salary)) %>%
group_by(gender, salary) %>%
summarise(n = n())
salary_categorical
